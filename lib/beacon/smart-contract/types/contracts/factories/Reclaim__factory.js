"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Reclaim__factory = void 0;
const ethers_1 = require("ethers");
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "address",
                name: "previousAdmin",
                type: "address",
            },
            {
                indexed: false,
                internalType: "address",
                name: "newAdmin",
                type: "address",
            },
        ],
        name: "AdminChanged",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "beacon",
                type: "address",
            },
        ],
        name: "BeaconUpgraded",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                components: [
                    {
                        internalType: "uint32",
                        name: "id",
                        type: "uint32",
                    },
                    {
                        internalType: "uint32",
                        name: "timestampStart",
                        type: "uint32",
                    },
                    {
                        internalType: "uint32",
                        name: "timestampEnd",
                        type: "uint32",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "addr",
                                type: "address",
                            },
                            {
                                internalType: "string",
                                name: "host",
                                type: "string",
                            },
                        ],
                        internalType: "struct Reclaim.Witness[]",
                        name: "witnesses",
                        type: "tuple[]",
                    },
                    {
                        internalType: "uint8",
                        name: "minimumWitnessesForClaimCreation",
                        type: "uint8",
                    },
                ],
                indexed: false,
                internalType: "struct Reclaim.Epoch",
                name: "epoch",
                type: "tuple",
            },
        ],
        name: "EpochAdded",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: "uint8",
                name: "version",
                type: "uint8",
            },
        ],
        name: "Initialized",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "previousOwner",
                type: "address",
            },
            {
                indexed: true,
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "implementation",
                type: "address",
            },
        ],
        name: "Upgraded",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "witnessAddress",
                type: "address",
            },
            {
                internalType: "string",
                name: "host",
                type: "string",
            },
        ],
        name: "addAsWitness",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "addNewEpoch",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint32",
                name: "epochNum",
                type: "uint32",
            },
            {
                components: [
                    {
                        internalType: "string",
                        name: "provider",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "parameters",
                        type: "string",
                    },
                    {
                        internalType: "string",
                        name: "context",
                        type: "string",
                    },
                ],
                internalType: "struct Claims.ClaimInfo",
                name: "claimInfo",
                type: "tuple",
            },
            {
                components: [
                    {
                        internalType: "bytes32",
                        name: "identifier",
                        type: "bytes32",
                    },
                    {
                        internalType: "address",
                        name: "owner",
                        type: "address",
                    },
                    {
                        internalType: "uint32",
                        name: "timestampS",
                        type: "uint32",
                    },
                    {
                        internalType: "uint256",
                        name: "epoch",
                        type: "uint256",
                    },
                ],
                internalType: "struct Claims.CompleteClaimData",
                name: "claimData",
                type: "tuple",
            },
            {
                internalType: "bytes[]",
                name: "signatures",
                type: "bytes[]",
            },
        ],
        name: "assertValidEpochAndSignedClaim",
        outputs: [],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "currentEpoch",
        outputs: [
            {
                internalType: "uint32",
                name: "",
                type: "uint32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "epochDurationS",
        outputs: [
            {
                internalType: "uint32",
                name: "",
                type: "uint32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "epochs",
        outputs: [
            {
                internalType: "uint32",
                name: "id",
                type: "uint32",
            },
            {
                internalType: "uint32",
                name: "timestampStart",
                type: "uint32",
            },
            {
                internalType: "uint32",
                name: "timestampEnd",
                type: "uint32",
            },
            {
                internalType: "uint8",
                name: "minimumWitnessesForClaimCreation",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint32",
                name: "epoch",
                type: "uint32",
            },
        ],
        name: "fetchEpoch",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint32",
                        name: "id",
                        type: "uint32",
                    },
                    {
                        internalType: "uint32",
                        name: "timestampStart",
                        type: "uint32",
                    },
                    {
                        internalType: "uint32",
                        name: "timestampEnd",
                        type: "uint32",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "addr",
                                type: "address",
                            },
                            {
                                internalType: "string",
                                name: "host",
                                type: "string",
                            },
                        ],
                        internalType: "struct Reclaim.Witness[]",
                        name: "witnesses",
                        type: "tuple[]",
                    },
                    {
                        internalType: "uint8",
                        name: "minimumWitnessesForClaimCreation",
                        type: "uint8",
                    },
                ],
                internalType: "struct Reclaim.Epoch",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint32",
                name: "epoch",
                type: "uint32",
            },
            {
                internalType: "bytes32",
                name: "identifier",
                type: "bytes32",
            },
            {
                internalType: "uint32",
                name: "timestampS",
                type: "uint32",
            },
        ],
        name: "fetchWitnessesForClaim",
        outputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "addr",
                        type: "address",
                    },
                    {
                        internalType: "string",
                        name: "host",
                        type: "string",
                    },
                ],
                internalType: "struct Reclaim.Witness[]",
                name: "",
                type: "tuple[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "initialize",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "minimumWitnessesForClaimCreation",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "proxiableUUID",
        outputs: [
            {
                internalType: "bytes32",
                name: "",
                type: "bytes32",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "witnessAddress",
                type: "address",
            },
        ],
        name: "removeAsWitness",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newOwner",
                type: "address",
            },
        ],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "addr",
                type: "address",
            },
            {
                internalType: "bool",
                name: "isWhitelisted",
                type: "bool",
            },
        ],
        name: "updateWitnessWhitelist",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newImplementation",
                type: "address",
            },
        ],
        name: "upgradeTo",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "newImplementation",
                type: "address",
            },
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "upgradeToAndCall",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        name: "witnesses",
        outputs: [
            {
                internalType: "address",
                name: "addr",
                type: "address",
            },
            {
                internalType: "string",
                name: "host",
                type: "string",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
class Reclaim__factory {
    static createInterface() {
        return new ethers_1.utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.Reclaim__factory = Reclaim__factory;
Reclaim__factory.abi = _abi;
